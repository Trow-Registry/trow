//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use chrono::Utc;
use sea_orm::entity::prelude::*;
use sea_orm::ActiveValue::{NotSet, Set};

use crate::registry::Digest;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "blob")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub digest: Digest,
    pub size: i32,
    pub is_manifest: bool,
    pub last_accessed: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::repo_blob_association::Entity")]
    RepoBlobAssociation,
}

impl Related<super::repo_blob_association::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RepoBlobAssociation.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            last_accessed: Set(Utc::now()),
            digest: NotSet,
            is_manifest: NotSet,
            size: NotSet,
        }
    }
}
