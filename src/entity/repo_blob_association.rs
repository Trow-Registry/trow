//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

use crate::registry::Digest;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "repo_blob_association")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub repo_name: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub blob_digest: Digest,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::blob::Entity",
        from = "Column::BlobDigest",
        to = "super::blob::Column::Digest",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Blob,
    #[sea_orm(
        belongs_to = "super::repo::Entity",
        from = "Column::RepoName",
        to = "super::repo::Column::Name",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Repo,
    #[sea_orm(has_many = "super::tag::Entity")]
    Tag,
}

impl Related<super::blob::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Blob.def()
    }
}

impl Related<super::repo::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Repo.def()
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tag.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
