//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use sea_orm::ActiveValue::Set;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "repo")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::blob::Entity")]
    Blob,
    #[sea_orm(has_many = "super::blob_upload::Entity")]
    BlobUpload,
    #[sea_orm(has_many = "super::manifest::Entity")]
    Manifest,
    #[sea_orm(has_many = "super::tag::Entity")]
    Tag,
}

impl Related<super::blob::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Blob.def()
    }
}

impl Related<super::blob_upload::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlobUpload.def()
    }
}

impl Related<super::manifest::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Manifest.def()
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tag.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

pub async fn insert_if_not_exists(
    conn: &impl ConnectionTrait,
    repo_name: String,
) -> Result<sea_orm::TryInsertResult<sea_orm::InsertResult<ActiveModel>>, sea_orm::DbErr> {
    Entity::insert(ActiveModel {
        name: Set(repo_name),
    })
    .on_conflict_do_nothing()
    .exec(conn)
    .await
}
