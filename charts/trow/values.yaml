# Default values for trow.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/trow-registry/trow
  tag:
  pullPolicy: IfNotPresent

podSecurityContext:
  runAsUser: 333333
  runAsGroup: 333333
  fsGroup: 333333

containerSecurityContext: {}

trow:
  ## if using NodePort, this can be set to 127.0.0.1:XXXX
  ## Where "XXXX" is the value of service.nodePort
  domain: myregistry.mydomain.io
  # user: user
  # password: password

  ## The Trow validation webhook validates which images are allowed to run on your cluster.
  ## Note: it runs AFTER the mutating webhook.
  validationWebhook:
    enabled: false
    failurePolicy: Ignore
    ## The validation webhook need to be configured.
    ## Note: it runs AFTER mutation webhooks.
    ## Example:
    config:
      ## Default action for unknown images (Deny or Allow)
      default: Deny
      ## List of allowed image URI prefixes
      allow:
        - 127.0.0.1
      deny: []
        # - 127.0.0.1/f/docker/nope/
  ## The proxyRegistries section allows you to configure Trow to act as a proxy for other registries.
  proxyRegistries:
    ## The Trow mutating webhook will automatically rewrite the pod image URLs to use the Trow proxy.
    webhook:
      enabled: false
      failurePolicy: Ignore
    config:
      # offline: false
      # registries:
      #   - alias: docker
      #     host: registry-1.docker.io
      #   - alias: ghcr
      #     host: ghcr.io
      #     ignore_repos: ["trow-registry/trow"]
      # max_size: 50GiB
  ## For more info on log levels see https://docs.rs/tracing-subscriber/0.3.17/tracing_subscriber/filter/struct.EnvFilter.html
  logLevel: info

## General configuration for the validation and mutating webhooks
webhooks:
  ## It is possible to restrict webhook access to some namespaces, ref:
  ##   https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-namespaceselector
  # namespaceSelector:
  replicas: 2
  ## Config to create a TLS cert for the webhooks (required if webhooks are used)
  tls:
    ## Create the cert using certmanager
    certmanager:
      enabled: false
      rootCert:
        # default to be 5y
        duration: ""
      webhooksCert:
        # default to be 1y
        duration: ""
      # issuerRef:
      #   name: "issuer"
      #   kind: "ClusterIssuer"
    ## Create a self-signed cert using kube-webhook-certgen to patch the webhooks (creates ClusterRole)
    patch:
      enabled: true
      image:
        image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.4@sha256:a9f03b34a3cbfbb26d103a14046ab2c5130a80c3d69d526ff8063d2b37b9fd3f
        pullPolicy: IfNotPresent
      podSecurityContext:
        runAsNonRoot: true
        runAsUser: 2000
        fsGroup: 2000
      containerSecurityContext:
        allowPrivilegeEscalation: false
    ## Use an existing secret that contains tls.crt and tls.key
    existingSecretRef: ~

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

service:
  type: NodePort
  port: 8000
  ## Specify the nodePort value for the LoadBalancer and NodePort service types.
  nodePort:

ingress:
  enabled: false
  annotations: {}
  ingressClassName: ""
  hosts:
    - paths: ["/"]
      # use "none" to not set a host (otherwise defaults to trow.domain)
      host:
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    memory: 256Mi
  #   cpu: 100m
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

volumeClaim:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 20Gi
