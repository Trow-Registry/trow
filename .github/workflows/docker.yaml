# Also builds the Docker images, but we want this name on the badge
name: OCI Conformance

on:
  push:
    branches:
    - main

jobs:
  upload_images:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Login to package repos
      run: |
          echo "${{secrets.CR_PAT}}" | docker login ghcr.io -u ${{secrets.CR_USER}} --password-stdin
          echo "${{secrets.DOCKERHUB_PASS}}" | docker login -u ${{secrets.DOCKERHUB_USER}} --password-stdin
    - name: Install buildx
      run: |
          mkdir -p ~/.docker/cli-plugins
          curl -fSL -o docker-buildx https://github.com/docker/buildx/releases/download/v0.7.1/buildx-v0.7.1.linux-amd64
          echo "22fcb78c66905bf6ddf198118aaa9838b0349a25347606264be17e4276d6d5fc *docker-buildx" | sha256sum -c -
          mkdir -p ~/.docker/cli-plugins
          mv docker-buildx ~/.docker/cli-plugins/
          chmod +x ~/.docker/cli-plugins/docker-buildx
    - uses: sigstore/cosign-installer@main
      with:
          cosign-release: 'v1.4.1'
    - name: Build and push multi-arch image
      shell: bash
      run: |
          #!/usr/bin/env bash
          set -eo pipefail

          #change to directory with script so we know where project root is
          #https://stackoverflow.com/questions/59895/can-a-bash-script-tell-which-directory-it-is-stored-in
          src_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
          cd "$src_dir"

          GH_REPO=${DOCKER_REPO:-"ghcr.io/containersolutions/trow/trow"}
          DH_REPO=${DOCKER_REPO:-"containersol/trow"}

          # Use trow-multi builder if it exists, otherwise create it
          set +e
          if ! docker buildx ls | grep -s trow-multi ;
          then
              # Register binfmt handlers
              docker run --rm --privileged aptman/qus -s -- -p arm aarch64
              # Create new build instance
              docker buildx create --name trow-multi
          fi
          set -e
          docker buildx use trow-multi

          # If we're in a github action, set the image name differently
          if [[ "$CI" = true ]]
          then
              VERSION=$(date +"%Y-%m-%d")-$GITHUB_RUN_NUMBER
          else
              VERSION=$(sed '/^version = */!d; s///;q' ../Cargo.toml | sed s/\"//g)
          fi

          TAG=${DOCKER_TAG:-"$VERSION"}
          DH_IMAGE=${IMAGE_NAME:-"$DH_REPO:$TAG"}
          GH_IMAGE=${IMAGE_NAME:-"$GH_REPO:$TAG"}
          DATE="$(date --rfc-3339=seconds)"

          if [[ "$CI" = true ]]
          then
             PUSH="--push"
          fi

          echo $PUSH $DH_IMAGE $GH_IMAGE $DH_REPO $GH_REPO
          docker buildx build \
              --build-arg VCS_REF="${SOURCE_COMMIT:-$(git rev-parse HEAD)}" \
              --build-arg VCS_BRANCH="${SOURCE_BRANCH:-$(git symbolic-ref --short HEAD)}" \
              --build-arg REPO="$DH_REPO" \
              --build-arg TAG="$TAG" \
              --build-arg DATE="$DATE" \
              --build-arg VERSION="$VERSION" \
              $PUSH --pull --platform linux/arm/v7,linux/arm64,linux/amd64 \
              -t $DH_IMAGE -t $GH_IMAGE -t $DH_REPO:default -t $GH_REPO:default \
              -t $DH_REPO:latest -t $GH_REPO:latest \
              -f Dockerfile ../

          # Sign the images 
          # Assumes runner has installed cosing e.g. uses: sigstore/cosign-installer@main
         if [[ "$CI" = true ]]
         then
             #sign once for each registry, will sign corresponding hash
             #COSIGN_EXPERIMENTAL=1 cosign sign --verbose $DH_IMAGE 
            echo "Running: COSIGN_EXPERIMENTAL=1 cosign --verbose sign $GH_IMAGE"
            COSIGN_EXPERIMENTAL=1 cosign sign --verbose $GH_IMAGE
         fi
         docker build -f ./docker/Dockerfile.notls -t containersol/trow:notls ./
         docker push containersol/trow:notls
  conformance_tests:
    services:
      trow:
        image: containersol/trow:notls
    needs: upload_images    
    runs-on: ubuntu-latest
    steps:
      - name: Run OCI Distribution Spec conformance tests
        uses: opencontainers/distribution-spec@main
        env:
          OCI_ROOT_URL: http://trow:8000
          OCI_NAMESPACE: oci-conformance/distribution-test
          OCI_TEST_PULL: 1
          OCI_TEST_PUSH: 1
          OCI_TEST_CONTENT_DISCOVERY: 1
          OCI_TEST_CONTENT_MANAGEMENT: 1
          OCI_HIDE_SKIPPED_WORKFLOWS: 0
          OCI_DEBUG: 0
      - name: Copy Report
        run: mkdir -p .out/ && mv {report.html,junit.xml} .out/
        if: always()
      - name: Upload test results zip as build artifact
        uses: actions/upload-artifact@v1
        with:
          name: oci-test-results-${{ github.sha }}
          path: .out/
        if: always()
